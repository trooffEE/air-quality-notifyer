package commander

import (
	"air-quality-notifyer/internal/app/commander/admin"
	"air-quality-notifyer/internal/app/commander/api"
	"air-quality-notifyer/internal/app/commander/mode"
	"air-quality-notifyer/internal/config"
	"air-quality-notifyer/internal/service/user"
	"air-quality-notifyer/internal/service/user/model"
	"strconv"

	tgbotapi "github.com/OvyFlash/telegram-bot-api"
	"go.uber.org/zap"
)

type Commander struct {
	API   api.Interface
	Admin admin.Interface
	Mode  mode.Interface
}

func New(bot *tgbotapi.BotAPI, cfg config.Config) *Commander {
	apiCmder, err := api.NewApi(bot, cfg)
	if err != nil {
		zap.S().Fatalw("Failed to create api interface", "error", err)
		return nil
	}

	return &Commander{
		API:   apiCmder,
		Admin: admin.New(apiCmder),
		Mode:  mode.New(apiCmder),
	}
}

func (c *Commander) Start(update tgbotapi.Update, service user.Interface) {
	message := update.Message
	chatId, username := message.Chat.ID, message.Chat.UserName

	msg := tgbotapi.NewMessage(chatId, "–î–∞–Ω–Ω—ã–π –±–æ—Ç –æ–ø–æ–≤–µ—â–∞–µ—Ç –æ –ø–ª–æ—Ö–æ–º –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥–æ—Ä–æ–¥–µ –ö–µ–º–µ—Ä–æ–≤–æ.\n\n–ü—Ä–æ—Å—å–±–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏–ª –Ω–æ—á—å—é! üçµ")
	if err := c.API.Send(api.MessageConfig{Msg: msg}); err != nil {
		zap.L().Error("Error sending faq message", zap.Error(err))
	}

	if !service.IsNewUser(chatId) {
		return
	}

	service.Register(model.User{
		Id:       strconv.Itoa(int(chatId)),
		Username: username,
	})
}

func (c *Commander) Settings(update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(
		update.Message.Chat.ID,
		"‚öôÔ∏è <strong>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</strong>\n"+
			"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω—É–∂–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞",
	)

	markup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(mode.KeypadText, mode.KeypadData),
			//TODO will be back soon
			//tgbotapi.NewInlineKeyboardButtonData(keypads.SensorsText, keypads.SensorsData),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(api.KeypadMenuBackText, api.KeypadMenuBackData),
		),
	)

	if err := c.API.Send(api.MessageConfig{Msg: msg, Markup: markup}); err != nil {
		zap.L().Error("Error sending configure message", zap.Error(err))
	}
}
