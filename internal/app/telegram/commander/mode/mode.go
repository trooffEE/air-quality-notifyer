package mode

import (
	"air-quality-notifyer/internal/app/telegram/commander/api"
	"air-quality-notifyer/internal/constants"
	"air-quality-notifyer/internal/helper"
	sDistricts "air-quality-notifyer/internal/service/districts"
	sUser "air-quality-notifyer/internal/service/user"
	"fmt"

	tgbotapi "github.com/OvyFlash/telegram-bot-api"
	"go.uber.org/zap"
)

type Commander struct {
	api     api.Interface
	service Service
}

type Service struct {
	User     sUser.Interface
	District sDistricts.Interface
}

type Interface interface {
	Setup(update tgbotapi.Update)
	Faq(update tgbotapi.Update)
	SetCity(update tgbotapi.Update)
	AskForDistrictOptions(update tgbotapi.Update)
	HandleDistrictsOptionsResult(update *tgbotapi.Poll)
}

func New(api api.Interface, service Service) Interface {
	return &Commander{
		api:     api,
		service: service,
	}
}

func (c *Commander) Setup(update tgbotapi.Update) {
	msg := tgbotapi.NewEditMessageText(
		update.CallbackQuery.Message.Chat.ID,
		update.CallbackQuery.Message.MessageID,
		fmt.Sprintf("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –¥–ª—è –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–π—Ç–µ –∫–∞–∫–æ–π —Ä–µ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ \"%s\", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö", KeypadFaqFromSetupText),
	)

	markup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(KeypadSetCityText, KeypadSetCityData),
			tgbotapi.NewInlineKeyboardButtonData(KeypadAskForDistrictOptionsText, KeypadAskForDistrictOptionsData),
			tgbotapi.NewInlineKeyboardButtonData(KeypadSetHomeText, KeypadSetHomeData),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(KeypadFaqFromSetupText, KeypadFaqFromSetupData),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(api.KeypadMenuBackText, api.KeypadMenuBackData),
		),
	)

	if err := c.api.Edit(api.EditMessageConfig{Msg: msg, Markup: &markup}); err != nil {
		zap.L().Error("Error sending operating_mode message", zap.Error(err))
	}
}

func (c *Commander) Faq(update tgbotapi.Update) {
	markup := tgbotapi.NewInlineKeyboardMarkup()

	if update.CallbackQuery.Data == KeypadFaqFromSetupData {
		markup.InlineKeyboard = append(markup.InlineKeyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(KeypadBackText, KeypadSetupData),
		))
	}

	markup.InlineKeyboard = append(markup.InlineKeyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(api.KeypadMenuBackText, api.KeypadMenuBackData),
	))

	msg := tgbotapi.NewEditMessageText(
		update.CallbackQuery.Message.Chat.ID,
		update.CallbackQuery.Message.MessageID,
		fmt.Sprintf(
			"‚öôÔ∏è <strong>–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã</strong> ‚öôÔ∏è\n\n"+
				"üèô <i>–ì–æ—Ä–æ–¥</i> üèô\n\n"+
				"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã, –≤ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤ –ø–æ <strong>–≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É</strong>. –î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –æ–±—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤–æ–∑–¥—É—Ö–∞ –≤ –≥–æ—Ä–æ–¥–µ üçÉ\n\n\n"+
				"üèò <i>–†–∞–π–æ–Ω</i> üèò\n\n"+
				"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã, –≤ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤ –ø–æ <strong>–≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–∞–π–æ–Ω—É</strong> –ö–µ–º–µ—Ä–æ–≤–æ. –î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–æ–Ω–µ–∫—Ä–µ—Ç–Ω—ã–º —Ä–∞–π–æ–Ω–æ–º/—Ä–∞–π–æ–Ω–∞–º–∏ –≥–æ—Ä–æ–¥–∞ üçÉ\n\n\n"+
				"üè° <i>–î–æ–º</i> üè°\n\n"+
				"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã, –≤ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤ <strong>–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–∏–ª–æ–º–µ—Ç—Ä–∞ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤ —Ä—É—á–Ω—É—é –≤–∞–º–∏</strong>. –î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º–∏ –¥–∞—Ç—á–∏–∫–∞–º–∏ üçÉ\n\n",
		),
	)

	if err := c.api.Edit(api.EditMessageConfig{Msg: msg, Markup: &markup}); err != nil {
		zap.L().Error("Error sending operating_mode_faq message", zap.Error(err))
	}
}

func (c *Commander) SetCity(update tgbotapi.Update) {
	message := update.CallbackQuery.Message
	chatId := message.Chat.ID
	err := c.service.User.SetOperatingMode(chatId, constants.City)
	if err != nil {
		zap.L().Error("Error setting operating mode", zap.Error(err))
		return
	}

	msg := tgbotapi.NewMessage(
		chatId,
		"üèô –ì–æ—Ä–æ–¥ üèô\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è —Å –¥–∞—Ç—á–∏–∫–æ–≤ –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É! üçÉ",
	)

	if err := c.api.Send(api.MessageConfig{Msg: msg}); err != nil {
		zap.L().Error("Error sending Mode.Set message", zap.Error(err))
	}

	if err = c.api.Delete(message); err != nil {
		zap.L().Error("Error deleting prev message", zap.Error(err))
	}
}

func (c *Commander) AskForDistrictOptions(update tgbotapi.Update) {
	chatID := update.CallbackQuery.Message.Chat.ID
	districts := c.service.District.GetAllDistrictsNames()
	response, err := c.api.SendPoll(chatID, api.PollConfig{
		Question: "–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ä–∞–π–æ–Ω—ã üèò:",
		Options:  districts,
	})
	if err != nil {
		zap.L().Error("set district: error sending poll", zap.Error(err))
	}
	c.service.District.SaveDistrictPollMessageInCache(
		response.Poll.ID,
		response.Chat.ID,
		response.MessageID,
	)
}

func (c *Commander) HandleDistrictsOptionsResult(pollUpdate *tgbotapi.Poll) {
	if pollUpdate == nil || pollUpdate.TotalVoterCount == 0 {
		return
	}

	//TODO Rename GetDistrictPollMessageInCache
	cachedPollState, err := c.service.District.GetDistrictPollMessageInCache(pollUpdate.ID)
	if err != nil {
		zap.L().Error("Error sending poll", zap.Error(err))
	} else {
		messageToDelete := tgbotapi.NewDeleteMessage(cachedPollState.ChatID, cachedPollState.MessageID)
		if err = c.api.DeleteRequest(messageToDelete); err != nil {
			zap.L().Error("Error sending DeleteMessage", zap.Error(err))
		}
	}
	options := helper.Filter(pollUpdate.Options, func(item tgbotapi.PollOption) bool { return item.VoterCount == 1 })

	fmt.Println(options)

	/**
	Logic that updates table - users_observed_districts
	*/
}
